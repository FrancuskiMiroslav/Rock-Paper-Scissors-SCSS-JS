/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

const choices = ['paper', 'rock', 'scissors'];
const buttons = Array.from(document.querySelectorAll('.button-choices'));
const scoreResult = document.querySelector('.score__result');

let score = 0;

function pickRandomChoice() {
	randomChoice = choices[Math.floor(Math.random() * choices.length)];

	return randomChoice;
}

buttons.forEach((button) => {
	button.addEventListener('click', (e) => {
		myChoice = e.currentTarget.getAttribute('data-choice');

		result();
	});
});

function result() {
	const computerChoice = pickRandomChoice();

	if (myChoice === 'rock' && myChoice === computerChoice) {
		updateScore(0);
		console.log('DRAW rezultat je nerešen');
	} else if (myChoice === 'paper' && myChoice === computerChoice) {
		updateScore(0);
		console.log('DRAW rezultat je nerešen');
	} else if (myChoice === 'scissors' && myChoice === computerChoice) {
		updateScore(0);
		console.log('DRAW rezultat je nerešen');
	} else if (myChoice === 'rock' && computerChoice === 'paper') {
		updateScore(-1);
		console.log('YOU LOSE paper beats rock');
	} else if (myChoice === 'rock' && computerChoice === 'scissors') {
		updateScore(1);
		console.log('YOU WIN rock beats scissors');
	} else if (myChoice === 'paper' && computerChoice === 'rock') {
		updateScore(1);
		console.log('YOU WIN paper beats rock');
	} else if (myChoice === 'paper' && computerChoice === 'scissors') {
		updateScore(-1);
		console.log('YOU LOSE scissors beat paper ');
	} else if (myChoice === 'scissors' && computerChoice === 'rock') {
		updateScore(-1);
		console.log('YOU LOSE rock beats scissors');
	} else if (myChoice === 'scissors' && computerChoice === 'paper') {
		updateScore(1);
		console.log('YOU WIN scissors beat paper ');
	}
}

function updateScore(value) {
	score += value;

	scoreResult.innerText = score;
}

////// modal popup
const rules = document.querySelector('.rules');
const modalContainer = document.getElementById('modal-container');
const modalClose = document.getElementById('modal-close');

rules.addEventListener('click', (e) => {
	modalContainer.classList.add('show');
});

modalClose.addEventListener('click', (e) => {
	modalContainer.classList.remove('show');
});


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf8;base64,
